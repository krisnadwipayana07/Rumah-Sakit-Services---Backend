// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	schedules "backend/business/schedules"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, domain
func (_m *Repository) Add(ctx context.Context, domain schedules.Domain) (schedules.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 schedules.Domain
	if rf, ok := ret.Get(0).(func(context.Context, schedules.Domain) schedules.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(schedules.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, schedules.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *Repository) GetAll(ctx context.Context) ([]schedules.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []schedules.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []schedules.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schedules.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllInOneDoctor provides a mock function with given fields: ctx, domain
func (_m *Repository) GetAllInOneDoctor(ctx context.Context, domain schedules.Domain) ([]schedules.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 []schedules.Domain
	if rf, ok := ret.Get(0).(func(context.Context, schedules.Domain) []schedules.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schedules.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, schedules.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Modificate provides a mock function with given fields: ctx, domain
func (_m *Repository) Modificate(ctx context.Context, domain schedules.Domain) (schedules.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 schedules.Domain
	if rf, ok := ret.Get(0).(func(context.Context, schedules.Domain) schedules.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(schedules.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, schedules.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, domain
func (_m *Repository) Remove(ctx context.Context, domain schedules.Domain) (schedules.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 schedules.Domain
	if rf, ok := ret.Get(0).(func(context.Context, schedules.Domain) schedules.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(schedules.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, schedules.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Show provides a mock function with given fields: ctx, domain
func (_m *Repository) Show(ctx context.Context, domain schedules.Domain) (schedules.Domain, error) {
	ret := _m.Called(ctx, domain)

	var r0 schedules.Domain
	if rf, ok := ret.Get(0).(func(context.Context, schedules.Domain) schedules.Domain); ok {
		r0 = rf(ctx, domain)
	} else {
		r0 = ret.Get(0).(schedules.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, schedules.Domain) error); ok {
		r1 = rf(ctx, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
